//A construction management system 
#include<iostream>
#include<fstream>       //library for file handling
#include<sstream>

using namespace std;

void exit()               //function to exit the program
{
    cout<<"THANK YOU!"<<endl;
}
class Host
{
private:
    int ch;              // choice variable
    char c;

public:
    
    double calculateStandardSurcharge(double rate, double amount) {
    // Calculate the surcharge based on the rate and amount
    amount = 1000;               //1000 per square feet
    double surcharge = rate * amount;
    
    // Return the surcharge value
    return surcharge;
    }


    void menu()                //Menu Function for owner of app
    {
        do
        {
            cout << "===== Host Menu =====" << endl;
            cout << "1. Add a builder or user" << endl;
            cout << "2. Remove a builder or user" << endl;
            cout << "3. Upgrade standard charges" << endl;
            cout << "4. Exit" << endl;
            cout << "Choice: ";
            cin >> ch;

            switch (ch)
            {
                case 1:
                    addBuilderOrUser();
                    break;
                case 2:
                    removeBuilderOrUser();
                    break;
                case 3:
                    upgradeStandardCharges();
                    break;
                case 4:
                    exit();
                    break;
                default:
                    cout << "Invalid Input" << endl;
            }

            cout << "Do you want to perform another function (y/n): ";
            cin >> c;
        } while (c == 'y');
    }

private:
    void addBuilderOrUser()
    {
        ofstream file("builders_users.txt", ios::app);

        string name;
        string type;

        cout << "Enter the name: ";
        cin.ignore();
        getline(cin, name);

        cout << "Enter the type (builder/user): ";
        cin >> type;

        file << name << " " << type << endl;

        cout << "Builder/User added successfully!" << endl;

        file.close();
    }

    void removeBuilderOrUser()
    {
        ifstream file("builders_users.txt");

        if (!file)
        {
            cout << "File not found!" << endl;
            return;
        }

        string line;
        string nameToRemove;
        string type, name;

        cout << "Enter the name: ";
        cin.ignore();
        getline(cin, nameToRemove);

        ofstream temp("temp.txt", ios::out);

        bool found = false;

        while (getline(file, line))
        {
            istringstream iss(line);
            if (iss >> nameToRemove >> type)
            {
                if (nameToRemove != name)
                    temp << line << endl;
                else
                    found = true;
            }
        }

        file.close();
        temp.close();

        if (found)
        {
            remove("builders_users.txt");
            rename("temp.txt", "builders_users.txt");
            cout << "Builder/User removed successfully!" << endl;
        }
        else
        {
            cout << "Builder/User not found!" << endl;
            remove("temp.txt");
        }
    }

    void upgradeStandardCharges()
    {
        ifstream file("standard_charges.txt");

        if (!file)
        {
            cout << "File not found!" << endl;
            return;
        }

        double charges;

        cout << "Enter the new standard charges: ";
        cin >> charges;

        ofstream temp("temp.txt", ios::out);

        string line;

        while (getline(file, line))
        {
            temp << charges << endl;
        }

        file.close();
        temp.close();

        remove("standard_charges.txt");
        rename("temp.txt", "standard_charges.txt");

        cout << "Standard charges upgraded successfully!" << endl;
    }

};


int main()
{
    Host H;
    int choice;
    cout<<"--------Welcome to the App--------"<<endl;
    cout<<"choose your designation: "<<endl;
    cout<<"1: Host"<<endl;
    cout<<"2: Builder"<<endl;
    cout<<"3: Client "<<endl;
    cout<<"Enter Your choice: "<<endl;
    cin>> choice;
    switch(choice)
    {
        case 1: 
           B.menu();
           break;
        case 2:
          
           break;
        case 3:
        
           break;
        default:
           cout<<"Invalid"<<endl;
    }
    
    return 0;
}
